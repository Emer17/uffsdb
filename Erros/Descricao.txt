BUGS UFFSDB

															1)Repetição de mensagem

ao se conectar a um banco (uffsdb por exemplo), aparece duplicado na tela:
uffsdb=# uffsdb=# 

quando tentamos criar uma tabela utilizando mais de uma linha, o erro tambem acontece: 
OBS: este caso acontece quando utilizamos crtl+c e crtl+v. fazendo manualmente, essa primeira linha resulta em erro.

uffsdb=create table velejador(            //enter
ERROR: syntax error.
uffsdb=# ERROR: syntax error.
uffsdb=# ERROR: syntax error.



		



															2)organizaçao estranha na tela:

copie as linhas seguintes e cole no terminal do uffsdb:
create table classe(
cod integer primary key,
descr varchar(30)
);

o que irá aparecer na tela é:

nautica=# create table classe(
cod integer primary key,
descr varchar(30)
);nautica(# nautica(# nautica(# 
CREATE TABLE






		
															3)erro ao sair do banco

dentro do banco "nautica", usei o comando \q. O terminal parece ficar esperando um comando e nada acontece. Usei Ctrl+c para poder sair.
			(Aconteceu apenas uma vez. Talvez não seja um erro. Pode ter acontecido em função de alguma linha acima.)
			
			


4) Comando HELP( maiúsculo ) resulta em erro de sintaxe, quando help( minúsculo ) não. 
/-----------------------------------------------------------------------------------------------------------------------------------------/
	( CORRIGIDO! ): apenas foi alterado a linha 38 do arquivo lex.l
		De: 	help 		return HELP;
		Para:	(?i:HELP) 	return HELP;
/-----------------------------------------------------------------------------------------------------------------------------------------/
		
5) Comando help e contributors resultam em modo operação não definida( OP_MODE == 0 )



														6)Não mostra erro ao inserir string em char


create table testachar( cod integer primary key, letra char );

insert into testachar values (1,'Abobrinha'); 

/* nao mostra nenhum erro, porem, se fizermos um select * from testachar, o resultado será:

cod        | letra      
------------+------------
 1          | A         

(1 row) 

* esta guardando só o primeiro caractere da string
*/

														7)erros de tabela em funçao de nomes grandes

create table isso99e99um99teste99de99nome99gigante(
cod integer
);

/*    \d mostrará:    */
 Schema     | Name            | Type       | Owner     
------------+-----------------+------------+-------  
 public     | testachar       | tuple      | ibetres    
 public     | isso99e99um99teste99 | tuple      | ibetres



 drop table isso99e99um99teste99de99nome99gigante;
/* O comando acima mostrará :  */
 ERROR: table "isso99e99um99teste99de99nome99gigante" does not exist.
 
 Outro erro crítico que acontece é que ao colocar um nome gigante um erro de corrupção de memória acontece, e o programa aborta.
( CORRIGIDO ): Um if foi colocado no início da função createTable(), para verificar se o tamanho do nome passado excede o máximo permitido



														8)nomes gigantes novamente...

create database agora77eu55realmente55vou55usar55um55nome55gigante55que55vai55bugar55esse55uffsdb;

/* isso resulta em:    */
WARNING: database name is too long, maximum number of characters allowed is 20


/*ok, forcei a amizade mesmo, vou diminuir pra 19 entao..*/
teste=# create database a123456789b12345678;
WARNING: database name is too long, maximum number of characters allowed is 20


/*o erro continua... só funciona com 18:*/
teste=# create database a123456789b1234567; 
CREATE DATABASE 

9) Erro ao deletar tabela ou database não existente de nome gigante
/-----------------------------------------------------------------------------------------------------------------------------------------/
	CORRIGIDO: O erro estava na função objcmp() do arquivo misc.c
		No caso, memória era alocada suficiente para o tamanho da macro TAMANHO_NOME_TABELA. Portanto, se algum nome maior fosse passado, 
			a memória era escrita em um lugar não permitido.
		Vale lembrar que a mesma função era usada para comparar nomes de banco, porém a macro TAMANHO_NOME_BANCO tem tamanho 20, 
			e TAMANHO_NOME_TABELA tem tamanho 40, ou seja, memória desnecessária era alocada.
		A solução foi simplesmente substituir a macro da função pelo tamanho específico de cada argumento, assim nenhuma memória desnecessária 
			é alocada
/-----------------------------------------------------------------------------------------------------------------------------------------/

uffsdb=# DROP TABLE ffffffffffffffffffffffffffffffffffffffffffffffffffffff;
*** Error in `./UFFSDB': free(): invalid next size (fast): 0x00000000010263e0 ***
Abortado

Após isso, o programa se fecha sozinho



10)Digitar varias aspas simples seguidas resulta em erro... nao aparece mais uffsdb=# na tela e nenhum comando funciona.
uffsdb=#'''''
'''''
aasa
asasf
asfsas
asasf					/*terminal fica esperando comandos mas nao faz nada*/
gsd



para sair desse erro temos que digitar duas aspas simples (''). Vai mostrar na tela:
ERROR: syntax error.


11) depois de se conectar a um banco,digitar ;;;;;;;;;;;;;;;; resulta em:
uffsdb=# uffsdb=# uffsdb=# uffsdb=# uffsdb=# uffsdb=# uffsdb=# uffsdb=# uffsdb=# 

//printa o nome do banco tantas vezes quanto foi digitado ;

 
